< 2019.02.12 >

* 자료형
===============================
boolean	참과 거짓	1바이트
char	문자		2바이트
===============================
byte	정수		1바이트
short	정수		2바이트
int	정수		4바이트
long	정수		8바이트
===============================
float	실수		4바이트
double	실수		8바이트
===============================



< 2019.02.13 >

* 음의 정수 표현 
- 양의 정수 표현방식과 다르다.
- 양의 정수와의 합이 되는 구조로 정의
- 2의 보수가 음의 정수 표현방식

	2의 보수 → 1의 보수 + 1

ex) 00000101 (5)
    → 1의 보수(비트열 반전(~)                ) 11111010
    → +1 = 11111011 (음수)

	00000101
      + 11111011
       100000000	-> 1 생략


* 자동 형 변환(Implict Conversion) 
byte → short
	      ↘
	 	 int → long → float → double
	      ↗
	char


* 명시적 형 변환을 하는 이유
 - 자동 형 변환 발생지점의 표시를 위해
	int num3 → long num4 = (long)num3;
 - 자동 형 변환의 규칙에 위배되지만 변환이 필요한 상황
	long num1 → int num2 = (int)num1;


* 논리 연산자
 - && : <A && B> A와 B가 모두 true이면 연산결과는 true (논리 AND)
 - || : <A || B> A와 B 둘 중 하나라도 true이면 연산결과는 true (논리 OR)
 - ! <!A> 연산결과는 A가 true이면 false, A가 false이면 true (논리 NOT)


 ++a,--a : 바로 , a++,a-- : 다음연산
	


< 2019.02.14 >

* import java.io.*;

* BufferedReader br = new BufferedReader(new InputStremReader(System.in));
	외부로부터 데이터를 입력받도록 처리하기 위해서 BufferedReader 인스턴스 생성

* br.readLine();	-> 입력값

* 문자열 → 숫자 	Integer.parseInt(~~~);

표기법 정리.txt



< 2019.02.15 >

* System.in.read();	→ 정수형, ASCII코드 값 형태

* System.in.skip(2);	→ 입력 대기열에 남아있는 『\r』과 『\n』을 스킵(건너뛰기, 버리기)
			   두 글자를 읽지않고 건너뛴다.(버린다.)

* printf()

* Test016

* java.util.Scanner

* Scanner sc = new Scanner(System.in);		→ Scanner 인스턴스 생성

* name = sc.next(); - 문자, 문자열
  kor = sc.nextInt(); - int 형

* sc = new Scanner(sc.next()).useDelimiter("\\s*,\\s*");	→ Scanner객체객체.구분자옵션(문자열과문자열사이의 ,)
	\\s* : (임의의)문자열
								   임의의 문자열과 문자열을 사용자 정의 구분자를 통해 분할
								   쓰지 않을 경우 공백 구분

* 비트 단위 연산자
 - 자리 바꾸기
		x = x ^ y;
		y = y ^ x;
		x = x ^ y;
 - 비트 shift 연산자(더 빠름)
 - int형 32비트 -> 처음 입력 값

* 삼항 연산자 = 조건 연산자
	strResult = (n % 2 == 0) ? "짝수" : "홀수";
	strResult = (n%4==0 && n%100!=0 || n%400==0) ? "윤년" : "평년";



< 2019.02.18 >

* 기본 switch : 조건에 맞는 결과를 실행 후 그 아래도 실행 
  일반 switch : 조건에 맞는 결과만 출력하기 위해 break 설정

* continue : (뒷부분 무시하고) 계속해서 수행

Test033 Test038 Test039 과제



< 2019.02.19 >

* break		멈춘다 ( + 그리고 빠져나간다)
  continue	(뒷 부분 무시하고 +) 계속해라
  while(true)   무한반복 

[Test041] - 기본 switch, 일반 switch 구분

[Test042] - switch를 활용하여 사칙연산 구현
	    * 『return』 : 1. 값의 반환
    		           2. 메소드 종료

[Test043] - 반복문(for, while, do ~ while) 실습
	    * while 단 한번도 실행되지 않을 수도 있다.
	    * do~while 최소 1번은 실행이 된다.
	    * for 1.초기값 2.조건 3.조건만족후변화

[Test044] - while문 실습

[Test045] - while문 실습

[Test046] - while문 실습

[Test047] - while문 실습

[Test048] - while문 실습

[Test049] - while문 실습

[Test050] - while문 실습 (소수)


[Test052], [Test053] 과제



< 2019.02.20 >

[Test051] - while문 실습

[Test054] - do ~ while문 실습

[Test055] - do ~ while문 실습

[Test056] - for문 실습

[Test057] - for문 실습

[Test058] - 다중 for문 (반복문의 중첩)을 활용한 구구단 출력 실습

[Test059] - 다중 for문 (반복문의 중첩)을 활용한 구구단 출력 실습

[Test064] - break
 
[Test065] - continue

[Test066] - return
 

[Test060], [Test061], [Test062], [Test063] - 과제


* 메소드

- 종속적, 독립적 x
- main() : 프로그램의 시작과 끝
- 어떤 행위나 기능 



< 2019.02.20 >

*** 알고리즘, 자료구조 (중요!)

*** 클래스와 인스턴스 (중요!)
- JAVA : 객체지향 프로그램 언어
- method : 어떤 행위나 기능
- method를 만들 수 있게 class를 설계
- 객체(Object) : 객체 중심의 프로그래밍
- 객체를 구성하는 것은 데이터와 기능이다.
- 클래스(class)라는 틀 기반의 객체 생성

- 전역변수 : class 전체 사용
- 메모리를 할당 받는 시점이 인스터스 생성 시점
  메소드를 호출하거나 어떤 변수를 담을 경우(사용할 경우) 인스턴스를 통해서 접근


[Test067] - 메소드 재귀호출 (재귀 메소드) - return

[Test068], [Test069] - 지역변수의 초기화 테스트 실습

[Test070] - public은 하나의 클래스에만 설정 가능



< 2019.02.22 >

[Test070], [Test071], [Test072], [Test073], [Test074]

[CircleTest]



< 2019.02.25 >

* 생성자(Constructor)
 - 메모리 할당
 - 초기화

* 생성자의 특징
 - 생성자는 메소드이지만, 일반 메소드처럼 호출될 수 없으며, 반환 자료형을 가질 수 없다.(『void』조차 가질 수 없으며 값을 반환할 수도 없다.)
 - 생성자는 클래스의 이름과 동일한 이름을 가져야 한다. (대소문자 명확히 구분)
 - 생성자는 객체를 생성하는 과정에서 『new 생성자()』의 형태로 호출된다. (인스턴스 생성 시 단 한 번만 호출)
 

[Test075] - 생성자(Constructor)

[Test076] - 생성자(Constructor), this

[Test077] - 생성자(Constructor)

[Test078] - 생성자(Constructor)와 초기화 블럭(Initialized Block) 

[Test079] - 배열의 선언과 초기화                                                

[Test080] - 배열의 기본적인 활용(실습 문제)

[Test081] - 배열의 기본적인 활용(실습 문제)

[Test082] - 배열의 기본적인 활용(실습 문제)

[Test083] - 배열의 기본적인 활용(과제)

[Test084] - 배열의 기본적인 활용(과제)

[Test085] - 배열의 배열(2차원 배열)

[Test086] - 배열의 배열(2차원 배열)(실습 문제)

[Test087] - 배열의 배열(2차원 배열)(실습 문제)



< 2019.02.26 >

[Test088] - 배열의 배열(2차원 배열)(실습 문제)

[Test089] - 배열과 난수 처리

* import java.util.Random;	→ 난수
  Random rd = new Random();
  rd.nextInt(100); → 0 ~ 99


== 접근제어지시자와 정보은닉, 그리고 캡슐화 ==

* 정보은닉
- 인스턴스 변수의 private화
- 인스턴스 변수를 private로 선언하게 되면 메소드가 유일한 접근 수단이 된다.

* 접근제어 지시자의 관계

지시자    클래스 내부 	동일 패키지  상속받는 클래스  이외의 영역
--------- -----------   -----------  ---------------  -----------
private	       ○	     X		    X		   X
default	       ○	     ○		    X		   X
protected      ○	     ○		    ○		   X
public	       ○	     ○		    ○		   ○

※ public > protected > default > private

- private : 클래스 내부(메소드)에서만 접근 가능
- public  : 어디서든 접근 가능(접근을 제어하지 않는다).
- default : 접근제어 지시자를 선언하지 않은 경우
	    default 생성자의 접근제어 지시자는 클래스의 선언 형태에 따라 결정된다.
- protected : 상속관계에 놓여있어도 접근을 허용

* 캡슐화(Encapsulation)


※ 객체 지향의 관점에서는 아주 커다란 하나의 클래스보다 아주 작은 여러 개의 클래스가 훨씬 큰 위력을 갖는다.

※ 캡슐화는 객체지향에서의 실제 프로젝트에 적용하기 쉽지 않은 개념 중 하나이다.
 

[Test090] - 정보은닉과 접근제어 지시자(private)

[Test091] - 클래스 설계, 배열 활용(입력한 날짜의 요일 구하기)

[Test092] - 클래스 변수(static 변수)와 클래스 메소드(static 메소드)



< 2019.02.27 >

[Test093] - 클래스와 인스턴스 활용(실습문제) + Record.java, Sungjuk.java

[Test094] - 클래스와 인스턴스 활용(실습문제)

[Test095] - 메소드 중복 정의(Method Overloading)

[Test096] - 메소드 오버로딩이 가능한 형태와 불가능한 형태

[Test097] - 배열의 복사(주소값 복사)

[Test098] - 배열의 복사(데이터 복사)

[Test099] - 배열의 복사(실습문제)
 


< 2019.2.28 >

[Test099] - 배열의 복사(실습문제 - 합집합)

[Test100] - 만년달력 → 시험

[Test101] - 주민등록번호 유효성 검사

[Test102] - 정렬(Sort) 알고리즘 - 선택 정렬(Selection Sort)

	    ※ 향상된 for문 → foreach 구문
	       for (int n : a)			// a 배열의 int형 자료들을 순차적으로 출력



< 2019.3.4 >

[Test103] - 거품 정렬(Bubble Sort : 버블 정렬)

[Test104] - 향상된 버블 정렬(Bubble Sort) → 스왑이 일어나지 않은 겨우 설정

[Test105] - 배열 + 정렬(실습문제 - 성적등수)

[Test106] - 상속(Inheritance)

[Test107] - 상속(Inheritance) + super(), Overloading, Overriding

[Test108] - 상속(Inheritance)(실습문제 - 사칙연산)



< 2019.3.5 >

[Test109] - 상속(Inheritance), 메소드 오버라이딩(Method Overriding) - @Override

[Test110] - 추상 클래스(Abstract) + 정렬

***[Test111] - 상속 관계에 있는 클래스들 간의 캐스팅(업 캐스팅, 다운 캐스팅)

[Test112] - 인터페이스(Interface)
	    				인터페이스를 implements 한 클래스는 
					인터페이스의 모든 메소드를 Overriding 해야 한다.
	 				→ 그렇게 해야 해당 클래스를 기반으로 인스턴스 생성이 가능하다.

[Test113] - 인터페이스(Interface)

[Test114] - 인터페이스(Interface)

[Test115] - 인터페이스(Interface)

[Test116] - 인터페이스(Interface)(실습 문제)



< 2019.3.6 >

[Test117] - 중첩 클래스(static 중첩 클래스), class가 3개

[Test118] - 중첩 클래스(local 클래스)

[Test119] - 중첩 클래스(내부 클래스)

[Test120] - 중첩 클래스(Anonymous 클래스)

[Test121] - 자바의 주요(중요) 클래스

[Test122] - 자바의 주요(중요) 클래스

[Test123] - Object 클래스

[Test124] - Object 클래스

[Test125] - Wrapper 클래스

[Test126] - Wrapper 클래스

[Test127] - Wrapper 클래스

[Test128] - Wrapper 클래스

[Test129] - Wrapper 클래스

[Test130] - Wrapper 클래스



< 2019.3.7 >

[Test131] - String 클래스(hashCode(), equals()

[Test132] - String 클래스(substring(), equalsIgnoreCase(), indexOf(), lastIndexOf(), endsWith(), charAt(), compareTo(), replaceAll(), trim(), format())

[Test133] - StringBuffer 클래스(toString(), capacity(), toUpperCase(), toLowerCase(),insert(), delete())

[Test134] - StringBuffer 클래스(replace())

[Test135] - StringTokenizer 클래스(countTokens(), hasMoreTokens(), nextToken())

[Test136] - 문자열 관련 클래스 + 캐릭터 셋(CharaterSet)(getProperty(), getBytes(), UTF-8, EUC-KR)

[Test137] - Calendar 클래스



< 2019.3.8 >

[Test138] - Calendar 클래스(실습 문제(달력), getActualMaximum(Calendar.DATE)-해당 월 마지막 날짜) 

[Test139] - Calendar 클래스(실습 문제(몇일후)), %t - 날짜타입, 시간타입

[Test140] - Math 클래스

[Test141] - Random 클래스(로또)

[Test142] - 예외(Exception) 처리



< 2019.3.12 >

[Test143] - 예외(Exception) 처리

[Test144] - 예외(Exception) 처리(Test143과 비교)

[Test145] - Test146과 비교

[Test146] - Test145와 비교

[Test147] - 예외 다시 던지기

[Test148] - 다른 예외 다시 던지기


==== 컬렉션 (프레임워크) - Java Collection Framwork(JCF) ====
 
 - 사전적 의미로 요소(객체)를 수집해 저장하는 것
 - Java에서 데이터를 저장하는 기본적인 자료구조들을 한곳에 모아 관리하고 편하게 사용하기 위해 제공
 - java.util 패키지에 포함
 - 인터페이스를 통해서 정형화된 방법으로 다양한 컬렉션 클래스 이용


* 배열의 문제점

 - 저장할 수 있는 객체 수가 배열을 생성할 때 결정
 	→ 불특정 다수의 객체를 저장하기에는 문제

 - 객체 삭제했을 때 해당 인덱스가 비게 됨
	→ 낱알 빠진 옥수수 같은 배열
	→ 객체를 저장하려면 어디가 비어있는지 확인해야 한다.


* Collection
	→ List : LinkedList, Stack, Vector, ArrayList
           순서를 유지하고 저장, 중복 저장 가능, 인덱스 관리
	→ Set  : HashSet, TreeSet
	   순서를 유지하지 않고 저장, 중복 저장 안됨

* Map	→ HashMap, TreeMap, HashTable, Properies
	   키(key)와 값(value)의 쌍으로 이루어진 데이터의 집합
	   순서는 유지되지 않고, 키는 중복을 허용하지 않으며 값의 중복을 허용

https://hackersstudy.tistory.com/26


[Test149] - 컬렉션 프레임워크(Collection Framework) - Stack

[Test150] - 컬렉션 프레임워크(Collection Framework) - Stack

[Test151] - 컬렉션 (Collection) - Queue

[Test152] - 컬렉션 (Collection) - Queue

[Test153] - 컬렉션 (Collection) - Vector
		
	    * Vector의 배열과 차이점
  		- 길이 변환 가능
  		- 서로 다른 요소(데이터구조) 입력 가능

[Test154] - 컬렉션 (Collection) - Vector



< 2019.3.13 > 

[Test154] - 컬렉션 (Collection) - Vector

[Test155] - 컬렉션 (Collection) - Vector
 
[Test156] - 컬렉션 (Collection) - Vector(검색 및 삭제)

[Test157] - 컬렉션 (Collection) - Vector(벡터 자료구조 객체 선언 및 생성 시 사용자 정의 클래스 활용 → 자료형)

[Test158] - 컬렉션 (Collection)(실습문제)



< 2019.3.14 >

[Test159] - Enumeration 과 Iterator 인터페이스

[Test160] - ArrayList 클래스

[Test161] - 컬렉션 (Collection)(검색, 삭제)

[Test162] - HashSet<E> 클래스

[Test163] - TreeSet<E> 클래스

[Test164] - Hashtable<K, V> 클래스

[Test165] - HashMap<K, V> 클래스



< 2019.3.15 >

[Test166] - 자바의 기본 입출력(I/O)










